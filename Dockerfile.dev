FROM alpine:3.18.3 as alpine-gcc
RUN apk update && apk add gcc git make autoconf automake libtool build-base

### building SequoiaBackend #Â TODO!!
FROM rust:alpine3.18 as sequoiaBuilder
ENV SEQUOIA_BRANCH=david/time_t
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add git pkgconf openssl-dev make bzip2-dev sqlite-dev musl-dev botan-libs
WORKDIR /root/planckCoreSequoiaBackend
RUN git clone --depth=1 --branch=$SEQUOIA_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-planckCoreSequoiaBackend.git .
COPY ./docker/planckCoreSequoiaBackend.conf local.conf
COPY ./docker/planckCoreSequoiaBackendMakefile Makefile
RUN make install -j $(nproc --ignore=2)

### building ym
FROM python:3.9-alpine as yml2Builder
ENV YML2_BRANCH=v2.7.6
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add git build-base
WORKDIR /root/yml2
RUN git clone --depth=1 --branch=$YML2_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-yml2.git .
RUN make dist -j $(nproc --ignore=2)

### building libetp
FROM alpine-gcc as libetpanBuilder
ENV LIBETPAN_BRANCH=v3.3.16
ARG GH_USER
ARG GH_TOKEN
WORKDIR /root/libetpan
RUN git clone --depth=1 --branch=$LIBETPAN_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-libetpan.git .
RUN ./autogen.sh --prefix=/opt/planck
RUN make install -j $(nproc --ignore=2)

### building ASN
FROM alpine-gcc as asn1cBuilder
ENV ASN1C_BRANCH=v0.9.28
ARG GH_USER
ARG GH_TOKEN
WORKDIR /root/asn1c
RUN git clone --depth=1 --branch=$ASN1C_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/vlm/asn1c.git .
RUN autoreconf -iv
RUN ./configure --prefix=/opt/planck
RUN make install -j $(nproc --ignore=2)

### building libPlanckTranspo
FROM alpine-gcc as libPlanckTransportBuilder
ENV LIBPLANCKTRANSPORT_BRANCH=v3.3.16
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add python3 py3-pip
COPY --from=yml2Builder /root/yml2/dist/yml2-2.7.4.tar.gz /root/
RUN python3 -m venv /opt/tools/virtualenv
RUN . /opt/tools/virtualenv/bin/activate && pip install /root/yml2-2.7.4.tar.gz
WORKDIR /root/libPlanckTransport
RUN git clone --depth=1 --branch=$LIBPLANCKTRANSPORT_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-libPlanckTransport.git .
COPY ./docker/libPlanckTransport.conf local.conf
RUN . /opt/tools/virtualenv/bin/activate && export PATH="$PATH:/opt/tools/virtualenv/bin" && \
    export LC_ALL=C.UTF-8 && export LANG=C.UTF-8 && make -j $(nproc --ignore=2) && make install

### building libPlanckCxx #TODO
FROM alpine-gcc as libPlanckCxxBuilder
ENV LIBPLANCKCXX_BRANCH=david/alpine-compat-3.3.16
ARG GH_USER
ARG GH_TOKEN
WORKDIR /root/libPlanckCxx11
RUN git clone --depth=1 --branch=$LIBPLANCKCXX_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-libPlanckCxx11.git .
RUN echo 'PREFIX=/opt/planck' > local.conf
RUN make install -j $(nproc --ignore=2)

### build core
FROM python:3.9-alpine as planckCoreBuilder
ENV PLANCKCORE_BRANCH=CORE-226
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add git build-base util-linux-dev sqlite-dev boost-dev boost-python3 botan-libs botan-dev
COPY --from=sequoiaBuilder /opt/planck /opt/planck
COPY --from=yml2Builder /root/yml2/dist/yml2-2.7.4.tar.gz /root/
RUN python3 -m venv /opt/tools/virtualenv
RUN . /opt/tools/virtualenv/bin/activate && pip install /root/yml2-2.7.4.tar.gz
RUN pip install -t /opt/tools/yml2/ /root/yml2-2.7.4.tar.gz
COPY --from=libetpanBuilder /opt/planck /opt/planck
COPY --from=asn1cBuilder /opt/planck /opt/planck
COPY --from=libPlanckTransportBuilder /opt/planck /opt/planck
COPY --from=libPlanckCxxBuilder /opt/planck /opt/planck

WORKDIR /root/planckCore/
RUN git clone --depth=1 --branch=$PLANCKCORE_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-planckCoreV3.git .
COPY ./docker/planckCore.conf local.conf
ENV LD_LIBRARY_PATH=/opt/planck/lib
ENV DYLD_LIBRARY_PATH=/opt/planck/lib
RUN . /opt/tools/virtualenv/bin/activate && export PATH="$PATH:/opt/tools/virtualenv/bin" && \
    export LC_ALL=C.UTF-8 && export LANG=C.UTF-8 && make -j $(nproc --ignore=2) && make install && make dbinstall

### build libplanck adapt
FROM alpine-gcc as libWrapperBuilder
ENV LIBPLANCKWRAPPER_BRANCH=v3.3.16
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add python3 py3-pip e2fsprogs-dev
WORKDIR /root/libPlanckWrapper/
COPY --from=planckCoreBuilder /opt/planck /opt/planck
RUN git clone --depth=1 --branch=$LIBPLANCKWRAPPER_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-libPlanckWrapper.git .
RUN echo 'PREFIX=/opt/planck' > local.conf
RUN make install -j $(nproc --ignore=2)

### build pywrapp
FROM python:3.9-alpine as pyWrapperBuilder
ENV PYTHONWRAPPER_BRANCH=v3.3.16
ARG GH_USER
ARG GH_TOKEN
RUN apk update && apk add git boost-dev make gcc build-base e2fsprogs-dev
COPY --from=sequoiaBuilder /opt/planck /opt/planck
COPY --from=libetpanBuilder /opt/planck /opt/planck
COPY --from=asn1cBuilder /opt/planck /opt/planck
COPY --from=libPlanckTransportBuilder /opt/planck /opt/planck
COPY --from=libPlanckCxxBuilder /opt/planck /opt/planck
COPY --from=planckCoreBuilder /opt/planck /opt/planck
COPY --from=libWrapperBuilder /opt/planck /opt/planck
ENV LD_LIBRARY_PATH=/opt/planck/lib
ENV DYLD_LIBRARY_PATH=/opt/planck/lib
WORKDIR /root/planckPythonWrapper/
RUN git clone --depth=1 --branch=$PYTHONWRAPPER_BRANCH https://${GH_USER}:${GH_TOKEN}@github.com/plancksecurity/foundation-planckPythonWrapper.git .
RUN echo 'PREFIX=/opt/planck' > local.conf
RUN ln -s /usr/lib/libboost_python311.so /usr/lib/libboost_python3.so
RUN pip install --upgrade setuptools==61.0.0
RUN make dist-whl -j $(nproc --ignore=2)

### build proxy
FROM python:3.9-alpine as proxyBuilder
RUN apk update && apk add python3 py3-pip
WORKDIR /root/proxy/
COPY . /root/proxy/
RUN pip install build
RUN python -m build

### build runner
FROM python:3.9-alpine as runner
RUN apk update && apk search postfix btree
RUN apk update && apk add python3 py3-pip postfix boost-dev boost-python3 botan-libs botan-dev sqlite rsyslog mailx
RUN apk add bash inetutils-telnet nano mailx bind-tools # dev/debug tools
RUN echo 'alias l="ls -la --color=yes"' >> /etc/bash/bashrc
RUN echo 'alias pico="nano"' >> /etc/bash/bashrc
WORKDIR /root/
RUN ln -s /usr/lib/libboost_python311.so /usr/lib/libboost_python3.so
ENV LD_LIBRARY_PATH=/opt/planck/lib
ENV DYLD_LIBRARY_PATH=/opt/planck/lib
COPY --from=sequoiaBuilder /opt/planck /opt/planck
COPY --from=libetpanBuilder /opt/planck /opt/planck
COPY --from=asn1cBuilder /opt/planck /opt/planck
COPY --from=libPlanckTransportBuilder /opt/planck /opt/planck
COPY --from=libPlanckCxxBuilder /opt/planck /opt/planck
COPY --from=planckCoreBuilder /opt/planck /opt/planck
COPY --from=libWrapperBuilder /opt/planck /opt/planck
COPY --from=pyWrapperBuilder /opt/planck /opt/planck
COPY --from=pyWrapperBuilder /root/planckPythonWrapper/dist /opt/planck/dist/wrapper
COPY --from=proxyBuilder /root/proxy/dist/ /opt/planck/dist/proxy
RUN pip install /opt/planck/dist/wrapper/?*.whl
COPY . /home/proxy/
RUN pip install pytest
RUN pip install -e /home/proxy/
RUN cp -pravi /opt/planck/lib/?* /lib # silly workaround for "missing" libraries - using the /opt prefix and venvs inside a Docker is annoyingly pointless
RUN rm -rf /opt/planck/dist

# Add the "proxy" user without a password, create the work dir and config volume
RUN adduser --disabled-password proxy
RUN mkdir /home/proxy/work
RUN mkdir /volume
RUN mkdir /volume.skel
COPY ./docker/volume.skel /volume.skel

# Copy the init script
COPY ./docker/planck.init.sh /planck.init.sh
COPY ./docker/env2config.py /env2config.py
COPY ./docker/rsyslog.conf /etc/rsyslog.conf

EXPOSE 25/tcp
EXPOSE 587/tcp
EXPOSE 588/tcp
WORKDIR /home/proxy
RUN chown proxy:proxy . -R

ENV PEP_LOG_ADAPTER=1
ENV PEP_MULTITHREAD=1

## TEST ENTRY POINT
# # Copy the settings file
# COPY ./docker/docker-settings.json /home/proxy/settings.json

# # Proxy basic test
# COPY ./tests/emails/basic.enc.eml /home/proxy/basic.enc.eml
# COPY ./tests/test_keys/3F8B5F3DA55B39F1DF6DE37B6E9B9F4A3035FCE3.sec.asc /home/proxy/keys/

# ENTRYPOINT [ "planckproxy", "decrypt", "settings.json", "-f", "/home/proxy/basic.enc.eml", "--DEBUG" ]

## PRODUCTION ENTRY POINT
ENTRYPOINT [ "/planck.init.sh" ]
